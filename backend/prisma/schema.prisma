generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())

  posts         Post[]                     // One-to-many: User -> Post
  likes         Like[]                     // One-to-many: User -> Like
  comments      Comment[]                  // One-to-many: User -> Comment

  accounts      Account[]                  // One-to-many: User -> Account
  sessions      Session[]                  // One-to-many: User -> Session
}

model Post {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id])  // Many-to-one: Post -> User

  likes     Like[]                                          // One-to-many: Post -> Like
  comments  Comment[]                                       // One-to-many: Post -> Comment
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String

  user      User     @relation(fields: [userId], references: [id])   // Many-to-one: Like -> User
  post      Post     @relation(fields: [postId], references: [id])   // Many-to-one: Like -> Post

  @@unique([userId, postId])  // Ensure a user can like a post only once
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  postId    String

  user      User     @relation(fields: [userId], references: [id])   // Many-to-one: Comment -> User
  post      Post     @relation(fields: [postId], references: [id])   // Many-to-one: Comment -> Post
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
